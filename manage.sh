#!/bin/bash

# --- Configuration ---
INSTALL_DIR="/mnt/bot"
PYTHON_EXECUTABLE="/usr/bin/python3"

# --- Colors ---
C_RESET='\033[0m'
C_RED='\033[0;31m'
C_GREEN='\033[0;32m'
C_YELLOW='\033[0;33m'
C_BLUE='\033[0;34m'
C_CYAN='\033[0;36m'
C_LIGHT_GRAY='\033[0;37m'

# --- Helper Functions ---
check_root() {
    if [ "$(id -u)" -ne 0 ]; then
        echo -e "${C_RED}❌ This script must be run as root. Please use sudo.${C_RESET}"
        exit 1
    fi
}

press_enter_to_continue() {
    echo ""
    # Using echo -n -e and read separately for better compatibility
    echo -n -e "${C_YELLOW}Press Enter to return to the menu...${C_RESET}"
    read
}

# --- Bot Management Functions ---
list_bots() {
    echo -e "${C_CYAN}Available bots:${C_RESET}"
    if [ ! -d "$INSTALL_DIR" ] || [ -z "$(ls -A $INSTALL_DIR/*.py 2>/dev/null)" ]; then
        echo -e "${C_YELLOW}No bots installed yet.${C_RESET}"
        return 1
    fi
    
    mapfile -t bots < <(ls -1 "$INSTALL_DIR"/*.py | xargs -n 1 basename | sed 's/\.py$//')
    
    for i in "${!bots[@]}"; do
        echo -e "  ${C_GREEN}$((i+1)))${C_RESET} ${bots[$i]}"
    done
    
    echo ""
    read -p "Select a bot by number (or press Enter to cancel): " choice
    
    # Validate choice
    if [[ ! "$choice" =~ ^[0-9]+$ ]] || [ "$choice" -lt 1 ] || [ "$choice" -gt "${#bots[@]}" ]; then
        SELECTED_BOT=""
        echo -e "${C_RED}Invalid selection or cancelled.${C_RESET}"
        return 1
    fi
    
    SELECTED_BOT="${bots[$((choice-1))]}"
    return 0
}

# --- Core Functionalities ---
install_new_bot() {
    echo -e "${C_BLUE}--- Installing a New Backup Bot ---${C_RESET}"
    
    # Dependency Check and Install
    if ! command -v pip3 &> /dev/null; then
        echo "Installing dependencies (python3, pip)..."
        if command -v apt-get &> /dev/null; then
            apt-get update -y && apt-get install -y python3 python3-pip curl
        elif command -v yum &> /dev/null; then
            yum install -y python3 python3-pip curl
        fi
        pip3 install requests pysocks
    fi

    # Get User Input
    read -p "Enter a unique name for this bot/service (e.g., MyServer1, no spaces): " BOT_NAME
    BOT_NAME=$(echo "$BOT_NAME" | tr -d '[:space:]' | tr -cd '[:alnum:]_-')

    if [ -f "$INSTALL_DIR/${BOT_NAME}.py" ]; then
        echo -e "${C_RED}Error: A bot with this name already exists.${C_RESET}"
        return
    fi

    read -p "Enter Telegram Bot Token: " BOT_TOKEN
    read -p "Enter Telegram Chat ID: " CHAT_ID
    read -p "Enter 3x-ui Panel URL (e.g., http://127.0.0.1:2053): " PANEL_URL
    read -p "Enter 3x-ui Panel Username: " PANEL_USERNAME
    read -p "Enter 3x-ui Panel Password: " PANEL_PASSWORD
    read -p "Enter Server IP (for the caption): " SERVER_IP
    read -p "Need a proxy? (y/n): " USE_PROXY
    PROXY_STRING=""
    if [[ "$USE_PROXY" == "y" || "$USE_PROXY" == "Y" ]]; then
        read -p "Enter Proxy URL (e.g., socks5://user:pass@host:port): " PROXY_STRING
    fi

    # Prepare Python Script
    mkdir -p "$INSTALL_DIR"
    PYTHON_SCRIPT_PATH="$INSTALL_DIR/${BOT_NAME}.py"
    BACKUP_FILENAME="${BOT_NAME}-backup.db"

    # Generate Python script using a heredoc
    cat > "$PYTHON_SCRIPT_PATH" << EOL
# --- Settings Section (Auto-generated by script) ---
BOT_TOKEN = "${BOT_TOKEN}"
CHAT_ID = "${CHAT_ID}"
PANEL_URL = "${PANEL_URL}"
PANEL_USERNAME = "${PANEL_USERNAME}"
PANEL_PASSWORD = "${PANEL_PASSWORD}"
SERVER_IP = "${SERVER_IP}"
CUSTOM_NAME = "${BOT_NAME}"
BACKUP_FILENAME = "${BACKUP_FILENAME}"
BACKUP_INTERVAL = 3600
PROXY_URL = "${PROXY_STRING}"

# --- Do not edit below this line ---
import requests, time, datetime, json

def get_proxies():
    if PROXY_URL:
        return {'http': PROXY_URL, 'https': PROXY_URL}
    return None

def get_session():
    session = requests.Session()
    session.verify = False
    requests.packages.urllib3.disable_warnings()

    login_url = f"{PANEL_URL}/login"
    payload = {"username": PANEL_USERNAME, "password": PANEL_PASSWORD}
    
    try:
        response = session.post(login_url, json=payload, timeout=10, proxies=get_proxies())
        if response.status_code == 200 and ('session' in session.cookies or '3x-ui' in session.cookies):
            print("✅ Login successful and session cookie received.")
            return session
        else:
            print(f"❌ Login failed. Status: {response.status_code}, Response: {response.text}")
            return None
    except requests.exceptions.RequestException as e:
        print(f"❌ Panel connection error during login: {e}")
        return None

def get_backup_content(session):
    if not session:
        return None
    
    backup_url = f"{PANEL_URL}/server/getDb"
    try:
        print("Downloading backup file...")
        response = session.get(backup_url, timeout=20, proxies=get_proxies())
        if response.status_code == 200 and response.content:
            # A simple check to see if it's likely a database file not an html page
            if response.content.startswith(b'SQLite format 3'):
                print("✅ Backup file downloaded successfully.")
                return response.content
            else:
                print("❌ Downloaded file is not a valid SQLite DB. Probably a login page due to failed auth.")
                return None
        else:
            print(f"❌ Failed to download backup file. Status: {response.status_code}")
            return None
    except requests.exceptions.RequestException as e:
        print(f"❌ Network error while downloading backup: {e}")
        return None

def send_to_telegram(db_content):
    if not db_content: return
    print("Sending backup to Telegram...")
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    caption = (f"📅 **API Backup | {timestamp}**\\n\\n"
               f"🖥️ Server: {CUSTOM_NAME}\\n"
               f"🌐 IP: {SERVER_IP}")
    
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendDocument"
    files = {'document': (BACKUP_FILENAME, db_content)}
    data = {'chat_id': CHAT_ID, 'caption': caption, 'parse_mode': 'Markdown'}
    try:
        response = requests.post(url, data=data, files=files, proxies=get_proxies())
        if response.status_code == 200:
            print("✅ Backup sent to Telegram.")
        else:
            print(f"❌ Telegram sending error: {response.json()}")
    except Exception as e:
        print(f"❌ Telegram connection error: {e}")

def main_loop():
    while True:
        print(f"\\n--- Running backup for {CUSTOM_NAME} ---")
        session = get_session()
        backup_data = get_backup_content(session)
        if backup_data: 
            send_to_telegram(backup_data)
        print(f"--- Process finished. Next run in {BACKUP_INTERVAL / 3600:.1f} hour(s). ---")
        time.sleep(BACKUP_INTERVAL)

if __name__ == "__main__":
    print(f">>> Initial test for {CUSTOM_NAME}...")
    s = get_session()
    backup = get_backup_content(s)
    if backup:
        send_to_telegram(backup)
    main_loop()
EOL

    # Create and start systemd service
    SERVICE_FILE_PATH="/etc/systemd/system/${BOT_NAME}.service"
    cat > "$SERVICE_FILE_PATH" << EOL
[Unit]
Description=3x-ui Telegram Backup Bot (${BOT_NAME})
After=network.target
[Service]
Type=simple
User=root
ExecStart=${PYTHON_EXECUTABLE} ${PYTHON_SCRIPT_PATH}
Restart=always
RestartSec=10
[Install]
WantedBy=multi-user.target
EOL

    systemctl daemon-reload
    systemctl enable "${BOT_NAME}.service"
    systemctl start "${BOT_NAME}.service"
    
    echo -e "${C_GREEN}✅ Bot '${BOT_NAME}' installed and started successfully!${C_RESET}"
}

uninstall_bot() {
    echo -e "${C_BLUE}--- Uninstall a Backup Bot ---${C_RESET}"
    if ! list_bots; then return; fi
    
    read -p "Are you sure you want to PERMANENTLY delete '${SELECTED_BOT}'? (y/n): " confirm
    if [[ "$confirm" != "y" && "$confirm" != "Y" ]]; then
        echo "Uninstall cancelled."
        return
    fi
    
    echo "Stopping and disabling service..."
    systemctl stop "${SELECTED_BOT}.service" &>/dev/null || true
    systemctl disable "${SELECTED_BOT}.service" &>/dev/null || true
    
    echo "Deleting files..."
    rm -f "/etc/systemd/system/${SELECTED_BOT}.service"
    rm -f "$INSTALL_DIR/${SELECTED_BOT}.py"
    
    systemctl daemon-reload
    
    echo -e "${C_GREEN}✅ Bot '${SELECTED_BOT}' has been successfully uninstalled.${C_RESET}"
}

edit_bot() {
    echo -e "${C_BLUE}--- Edit a Bot's Configuration ---${C_RESET}"
    if ! list_bots; then return; fi

    SCRIPT_PATH="$INSTALL_DIR/${SELECTED_BOT}.py"
    
    # Precise function to read a value from the python script
    get_current_val() {
        grep -oP "$1 = \"\K[^\"]+" "$SCRIPT_PATH" || echo ""
    }
    
    CURRENT_TOKEN=$(get_current_val 'BOT_TOKEN')
    CURRENT_CHAT_ID=$(get_current_val 'CHAT_ID')
    CURRENT_PANEL_URL=$(get_current_val 'PANEL_URL')
    CURRENT_PANEL_USER=$(get_current_val 'PANEL_USERNAME')
    CURRENT_SERVER_IP=$(get_current_val 'SERVER_IP')
    CURRENT_PROXY=$(get_current_val 'PROXY_URL')
    
    echo -e "\nEditing bot: ${C_YELLOW}${SELECTED_BOT}${C_RESET}. Press Enter to keep the current value."
    
    # --- Using echo -n -e and read for better color handling ---
    
    echo -e "${C_CYAN}-----------------------------------------------------${C_RESET}"
    echo -n -e "New Bot Token [Current: ${C_LIGHT_GRAY}${CURRENT_TOKEN}${C_RESET}]: "
    read NEW_TOKEN
    [ -z "$NEW_TOKEN" ] && NEW_TOKEN=$CURRENT_TOKEN
    
    echo -e "${C_CYAN}-----------------------------------------------------${C_RESET}"
    echo -n -e "New Chat ID [Current: ${C_LIGHT_GRAY}${CURRENT_CHAT_ID}${C_RESET}]: "
    read NEW_CHAT_ID
    [ -z "$NEW_CHAT_ID" ] && NEW_CHAT_ID=$CURRENT_CHAT_ID

    echo -e "${C_CYAN}-----------------------------------------------------${C_RESET}"
    echo -n -e "New Panel URL [Current: ${C_LIGHT_GRAY}${CURRENT_PANEL_URL}${C_RESET}]: "
    read NEW_PANEL_URL
    [ -z "$NEW_PANEL_URL" ] && NEW_PANEL_URL=$CURRENT_PANEL_URL

    echo -e "${C_CYAN}-----------------------------------------------------${C_RESET}"
    echo -n -e "New Panel Username [Current: ${C_LIGHT_GRAY}${CURRENT_PANEL_USER}${C_RESET}]: "
    read NEW_PANEL_USER
    [ -z "$NEW_PANEL_USER" ] && NEW_PANEL_USER=$CURRENT_PANEL_USER
    
    echo -e "${C_CYAN}-----------------------------------------------------${C_RESET}"
    echo -n -e "New Panel Password [Current: ${C_LIGHT_GRAY}hidden${C_RESET}]: "
    read NEW_PANEL_PASS
    
    echo -e "${C_CYAN}-----------------------------------------------------${C_RESET}"
    echo -n -e "New Server IP [Current: ${C_LIGHT_GRAY}${CURRENT_SERVER_IP}${C_RESET}]: "
    read NEW_SERVER_IP
    [ -z "$NEW_SERVER_IP" ] && NEW_SERVER_IP=$CURRENT_SERVER_IP

    echo -e "${C_CYAN}-----------------------------------------------------${C_RESET}"
    echo -n -e "New Proxy URL [Current: ${C_LIGHT_GRAY}${CURRENT_PROXY}${C_RESET}]: "
    read NEW_PROXY
    # If user presses enter, keep the old value. Note: this allows removing a proxy by entering a space and then deleting it.
    if [ -z "$NEW_PROXY" ]; then
        if [[ "$NEW_PROXY" != " " ]]; then
            NEW_PROXY=$CURRENT_PROXY
        fi
    fi
    echo -e "${C_CYAN}-----------------------------------------------------${C_RESET}"

    # Update the file using sed
    sed -i "s|BOT_TOKEN = \".*\"|BOT_TOKEN = \"${NEW_TOKEN}\"|" "$SCRIPT_PATH"
    sed -i "s|CHAT_ID = \".*\"|CHAT_ID = \"${NEW_CHAT_ID}\"|" "$SCRIPT_PATH"
    sed -i "s|PANEL_URL = \".*\"|PANEL_URL = \"${NEW_PANEL_URL}\"|" "$SCRIPT_PATH"
    sed -i "s|PANEL_USERNAME = \".*\"|PANEL_USERNAME = \"${NEW_PANEL_USER}\"|" "$SCRIPT_PATH"
    sed -i "s|SERVER_IP = \".*\"|SERVER_IP = \"${NEW_SERVER_IP}\"|" "$SCRIPT_PATH"
    sed -i "s|PROXY_URL = \".*\"|PROXY_URL = \"${NEW_PROXY}\"|" "$SCRIPT_PATH"
    
    if [ -n "$NEW_PANEL_PASS" ]; then
        sed -i "s|PANEL_PASSWORD = \".*\"|PANEL_PASSWORD = \"${NEW_PANEL_PASS}\"|" "$SCRIPT_PATH"
    fi
    
    echo -e "\n${C_YELLOW}Restarting bot to apply changes...${C_RESET}"
    systemctl restart "${SELECTED_BOT}"
    
    echo -e "${C_GREEN}✅ Bot '${SELECTED_BOT}' updated and restarted successfully.${C_RESET}"
}


manage_bots() {
    echo -e "${C_BLUE}--- Manage an Existing Bot ---${C_RESET}"
    if ! list_bots; then return; fi
    
    while true; do
        echo -e "\n${C_CYAN}Managing bot: ${SELECTED_BOT}${C_RESET}"
        echo "1) Start"
        echo "2) Stop"
        echo "3) Restart"
        echo "4) Status"
        echo "5) View Logs"
        echo "6) Back to Main Menu"
        read -p "Select an option: " manage_choice
        
        case $manage_choice in
            1) systemctl start "${SELECTED_BOT}"; echo -e "${C_GREEN}Service started.${C_RESET}";;
            2) systemctl stop "${SELECTED_BOT}"; echo -e "${C_YELLOW}Service stopped.${C_RESET}";;
            3) systemctl restart "${SELECTED_BOT}"; echo -e "${C_GREEN}Service restarted.${C_RESET}";;
            4) systemctl status "${SELECTED_BOT}";;
            5) journalctl -u "${SELECTED_BOT}" -f --no-pager;;
            6) break;;
            *) echo -e "${C_RED}Invalid option.${C_RESET}";;
        esac
    done
}


# --- Main Menu ---
main_menu() {
    check_root
    while true; do
        clear
        echo -e "${C_CYAN}=====================================================${C_RESET}"
        echo -e "${C_BLUE}     3x-ui Telegram Backup Bot Management Panel      ${C_RESET}"
        echo -e "${C_CYAN}=====================================================${C_RESET}"
        echo "1) Install a new bot"
        echo "2) Uninstall a bot"
        echo "3) Edit a bot's configuration"
        echo "4) Manage a bot (start/stop/logs)"
        echo "5) Exit"
        echo ""
        read -p "Select an option [1-5]: " main_choice
        
        case $main_choice in
            1) install_new_bot; press_enter_to_continue;;
            2) uninstall_bot; press_enter_to_continue;;
            3) edit_bot; press_enter_to_continue;;
            4) manage_bots;;
            5) exit 0;;
            *) echo -e "${C_RED}Invalid option, please try again.${C_RESET}"; sleep 1;;
        esac
    done
}

main_menu
